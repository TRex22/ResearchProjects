package myGeoInfo;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import javax.swing.BoxLayout;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
//import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
//import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;

import javax.swing.WindowConstants;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 * Code excluding Auto Generated code such as Jigloo code was programmed
 * by Jason Chalom 12S
 * Jigloo Code was also edited by Jason Chalom 12S
 * Every if ( ==null) statement has been removed or commented out
 *  from the code to improve gui functionality
 * 
 * Jigloo Code Stamp:
 * This code was edited or generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
 * use. If Jigloo is being used commercially (ie, by a corporation,
 * company or business for any purpose whatever) then you
 * should purchase a license for each developer using Jigloo.
 * Please visit www.cloudgarden.com for details.
 * Use of Jigloo implies acceptance of these licensing terms.
 * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED FOR
 * THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED
 * LEGALLY FOR ANY CORPORATE OR COMMERCIAL PURPOSE.
 */
public class MainJFrame extends javax.swing.JFrame {

	{
		//Set Look & Feel
		//I found it from Jigloo Form Editor's settings
		//It is autogenerated
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	//GUI Fields
	private JFrame PasswordFrame;
	private JPasswordField txtPassword;
	private JLabel passIMG;
	private JLabel usrNameDO;
	private JLabel doPassLabel;
	private JButton CancelInputData;
	private JLabel percentCloudLabel;
	private JLabel AirPrLabel;
	private JLabel WindSpdLabel;
	private JLabel RainfallLabel;
	private JLabel EcologicalDataLabel;
	private JLabel SiteDataLabel;
	private JMenu SettingsMnu;
	private JFrame AddDataFrame;
	private JMenuItem AboutMnuItm;
	private JMenuItem DispDispersionData;
	private JMenuItem DispMeanData;
	private JMenuItem DispGermorphData;
	private JMenuItem DispClimateData;
	private JMenuItem DispEcologyData;
	private JMenuItem DispSiteData;
	//private JMenuItem DispUsrItm;
	private JMenu DataTasksMnu;
	private JMenuItem AddDBaseDataItm;
	private JMenuItem AddTxtItm;
	private JFrame SettingsFrame;
	private JLabel UsrNameLbl;
	private JButton ClimaticDataButton;
	private JButton EcologyDataButton;
	private JButton EnterSiteDataButton;
	private JSeparator jSeparatorUsrSettings6;
	private JTextField NewTrueNameTxt;
	private JTextField newEmailTxtField;
	private JLabel NewTruNameLbl;
	private JLabel newEmailLbl;
	private JMenuItem DispListUsrs;
	private JFileChooser ExportUserListjFileChooser;
	private JMenuItem ExportUsrsMnuItm;
	private JScrollPane MainScrollPane;
	private JTextArea MainTextArea;
	private JPanel MainWindowPanel;
	private JFileChooser ExportDatajFileChooser;
	private JFileChooser AddSurveyJFileChooser;
	private JButton CloseSettingsButton;
	private JMenuItem DispListSurveyMnuItm;
	private JSeparator jSeparatorUsrSettings5;
	private JSeparator jSeparatorUsrSettings4;
	private JSeparator jSeparatorUsrSettings3;
	private JSeparator jSeparatorUsrSettings2;
	private JSeparator jSeparatorUsrSettings1;
	private JButton AddUsrButton;
	private JTextField NewUsrPassSet;
	private JTextField NewUsrNameSet;
	private JLabel NewPassLbl;
	private JLabel AddUsrLblSet;
	private JLabel ChangePassLbl;
	private JButton ChangePassButton;
	private JTextField NewPassSet;
	private JTextField OldPassSet;
	private JLabel NewPassLblSet;
	private JLabel OldPassSetLbl;
	private JSeparator jSeparatorUsrSettings;
	private JLabel UsrSetLbl;
	private JPanel SettingsPanel;
	private JButton passCancel;
	private JMenuItem PreferencesMnuItm;
	private JTextField RiverWidth;
	private JTextField RiverDepth;
	private JTextField RiverVelocity;
	private JTextField pHWater;
	private JTextField BacteriaWater;
	private JTextField NitratesWater;
	private JTextField CloudCover;
	private JTextField AirPressure;
	private JTextField WindSpd;
	private JTextField RainFallAmount;
	private JLabel NoteInputLabel;
	private JLabel GermorphWidth;
	private JLabel GermorphDepthLabel;
	private JLabel GermorphRiverVeloLabel;
	private JLabel GermorphPH;
	private JLabel GermorphBact;
	private JLabel GermorphNitrateLabel;
	private JCheckBox FieldSurveyTick;
	private JLabel IsFieldSurveyLabel;
	private JTextField EcologicalAmountPlants;
	private JTextField EcologicalAnimalAmounts;
	private JTextField EcologicalNitrates;
	private JTextField EcologicalSulphates;
	private JTextField EcologicalPhosphate;
	private JLabel PlantAmountLabel;
	private JLabel AnimalAmouLabel;
	private JLabel NitratesLabel;
	private JLabel SulphatesLabel;
	private JLabel PhosphatesLabel;
	private JMenuItem ExportDataMnuItm;
	private JLabel ClimatologicalDataLabel;
	private JSeparator jSeparator3;
	private JTextField SiteLocationInTxt;
	private JLabel SiteLocationLabel;
	private JButton EnterDataButton;
	private JSeparator jSeparator2;
	private JSeparator jSeparator1;
	private JLabel SiteNameLabel;
	private JTextField SiteNameIn;
	private JLabel GermorphDataLabel;
	private JMenuItem HelpSelectItm;
	private JMenu AddDataMnuItm;
	private JMenu HelpMnu;
	private JMenu EditMnuItm;
	private JMenuItem CloseMnuItm;
	private JMenuItem QuitMnuItm;
	private JMenuItem LoginMnuItm;
	private JMenu jMenu1;
	private JMenuBar MenuBar1;
	private JButton passAcc;
	private JTextField txtUsrName;

	//Other Fields used in 
	//main application for the actual functioning of the program
	//private String DefaultUsrName;
	//private String DefaultPassWrd;
	//private boolean useDefaultLogin;
	private boolean isLoggedin;
	private File SurveyPath;
	private File SaveData;
	private File SaveUsrList;
	private String QueryCode;

	private String SurveyID;
	private boolean SurveyIsChecked;
	//User ID for SQL tasks
	private int USerDBID;
	//My objects of classes for the program to use
	DBCode DBLink = new DBCode();
	OpenFile openfile = new OpenFile();
	SaveFile savefile = new SaveFile();
	AddData addData = new AddData();

	/**
	 * Auto-generated main method to display this JFrame
	 * Jigloo Code for Gui Starts Here, exluding my additions
	 */
	//This auto-gen main method by Jigloo loads the main window
	//henceforth is refered as 'this'

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				MainJFrame inst = new MainJFrame();
				inst.setLocationRelativeTo(null);
				inst.setVisible(true);


			}
		});
	}
	//TODO DBase and usr/pass
	//Constructor Method

	public MainJFrame() {
		super();
		initGUI();

		USerDBID = 0;
		if (DBLink.getErrorMessages() == "")
		{
			//System.out.println("Database Loaded Successfully.");
			MainTextArea.append("Database Loaded Successfully.\n");
		}
		else
		{
			//MainTextArea.append("Error\n"+DBLink.getErrorMessages()+"\n");

			//System.err.println("Error\n"+DBLink.getErrorMessages());

			//The program will not load if there is an error rather, it will show a error message
			//and then close
			MainTextArea.setText("");
			//It will also assume that the system is not logged in
			//It is redundant but for security reason has been place in the system at this point
			isLoggedin=false;


			//TODO Error Messages in docu
			JOptionPane.showMessageDialog(null, "There is an error with the Database.\nPlease Restart the program and try again\nThis usually occurs with 64bit opperating systems.\nTry 32bit next time.\nIt could also mean that the database file is missing.\n\nError Code:\n"+DBLink.getErrorMessages()+"\nThe program will now close.","Program Error",JOptionPane.ERROR_MESSAGE);

			System.exit(0);
			
			

		}
		if (isLoggedin == false)
		{
			MainTextArea.append("You are not logged in.\nPlease Login to Access System.\n");
		}

	}

	private void initGUI() {
		try {
			setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
			this.setTitle("GeoInfo Access");
			this.setName("main");
			this.setVisible(false);
			this.setLayout(new BorderLayout());
			this.setResizable(false);
			getContentPane().add(getMainWindowPanel(), BorderLayout.CENTER);
			{
				MenuBar1 = new JMenuBar();
				setJMenuBar(MenuBar1);
				MenuBar1.add(getJMenu1());
				MenuBar1.add(getDataTasksMnu());
				MenuBar1.add(getEditMnuItm());
				MenuBar1.add(getSettingsMnu());
				MenuBar1.add(getHelpMnu());
			}
			pack();
			this.setSize(934, 718);
		} catch (Exception e) {
			//add your error handling code here
			e.printStackTrace();
		}
	}


	//GUI CODE AUTOGENERATED BY JIGLOO AND THEN EDITED
	//All Other MEthods made for the program is above
	private JFrame getPasswordFrame() {
		PasswordFrame = new JFrame();
		PasswordFrame.setTitle("Enter your User Name and Password");
		PasswordFrame.setName("passFrame");
		PasswordFrame.getContentPane().setLayout(null);
		PasswordFrame.setPreferredSize(new java.awt.Dimension(511, 353));
		PasswordFrame.getContentPane().setBackground(new java.awt.Color(128,128,255));
		PasswordFrame.setAlwaysOnTop(true);
		PasswordFrame.setEnabled(true);
		PasswordFrame.getContentPane().add(getTxtUsrName(), "Center");
		PasswordFrame.getContentPane().add(getPassPassword());
		PasswordFrame.getContentPane().add(getPassAcc());
		PasswordFrame.getContentPane().add(getPassIMG());
		PasswordFrame.getContentPane().add(getUsrNameDO());
		PasswordFrame.getContentPane().add(getDoPassLabel());
		PasswordFrame.getContentPane().add(getPassCancel());
		PasswordFrame.setSize(511, 353);
		PasswordFrame.setVisible(true);
		PasswordFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		return PasswordFrame;
	}

	private JTextField getTxtUsrName() {
		//if(txtUsrName == null) {
		txtUsrName = new JTextField();
		txtUsrName.setBounds(230, 69, 200, 26);
		//}
		return txtUsrName;
	}

	private JPasswordField getPassPassword() {
		//if(txtPassword == null) {
		txtPassword = new JPasswordField();
		txtPassword.setBounds(230, 119, 200, 24);
		//}
		return txtPassword;
	}
	private JButton getPassAcc() {
		//if(passAcc == null) {
		passAcc = new JButton();
		passAcc.setText("OK");
		passAcc.setBounds(266, 154, 77, 25);

		
		passAcc.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				//txtUsrName.getText();
				//When the program loads it already checks if the db has been loaded properly and so it is not needed here

				//if (useDefaultLogin == true )
				//{
				//find if the username typed in is correct to the database

				//get list of all users
				String UserListDB = "";
				QueryCode = "SELECT Username FROM tblUser;";
				UserListDB = DBLink.DisplayWithoutHeadings(QueryCode);
				QueryCode = "";

				//check if username is in database
				if (UserListDB.contains(txtUsrName.getText()))
				{
					//get the password assosiated with the user if the user exists in db
					String UserPassDB = "";
					QueryCode = "SELECT Password FROM tblUser WHERE Username like '"+txtUsrName.getText()+"';";
					UserPassDB = DBLink.DisplayWithoutHeadings(QueryCode);
					QueryCode = "";
					//check if the password match to the database
					if (UserPassDB.contains(txtPassword.getText()))
					{
						isLoggedin=true;
						PasswordFrame.dispose();
						MainTextArea.setText("You are now logged in as "+txtUsrName.getText()+".\nYou now have Access to the system.\n");
						//found in jigloo
						PasswordFrame.setEnabled(false);
						LoginMnuItm.setEnabled(false);

						//find UserID for future use
						QueryCode = "SELECT UserID FROM tblUser WHERE Username like '"+""+txtUsrName.getText()+""+"';";
						//will throw error if something goes wrong with the id number

						try{
							//the database sql always ends on the nextline so the first character must be the only
							//selected or there will be a parsing error
							USerDBID = Integer.parseInt(""+(DBLink.DisplayWithoutHeadings(QueryCode)).charAt(0));
							QueryCode = "";
						}catch(Exception e)
						{
							QueryCode = "";
							JOptionPane.showMessageDialog(null, "An unknown error occured while accessing the database.\n" +
									"Please restart the program and try again." 
									,"Unknown Database Error",JOptionPane.ERROR_MESSAGE);
							//will exit system
							System.exit(0);
						}
						QueryCode = "";

					}
					else
					{
						isLoggedin=false;
						//TODO JOptionPane Error Message
						JOptionPane.showMessageDialog(null, "Incorrect Username or Password","Invalid Login",JOptionPane.ERROR_MESSAGE);
					}
				}
				else
				{
					isLoggedin=false;
					//TODO JOptionPane Error Message
					JOptionPane.showMessageDialog(null, "Incorrect Username or Password","Invalid Login",JOptionPane.ERROR_MESSAGE);
				}
				//}





			}});
		//}
		return passAcc;
	}

	private JLabel getPassIMG() {
		//	if(passIMG == null) {
		passIMG = new JLabel();
		passIMG.setBounds(12, 36, 206, 197);
		passIMG.setIcon(new ImageIcon(getClass().getClassLoader().getResource("PasswordIMG.png")));

		//}
		return passIMG;
	}

	private JLabel getUsrNameDO() {
		//if(usrNameDO == null) {
		usrNameDO = new JLabel();
		usrNameDO.setText("Enter Your User Name");
		usrNameDO.setBounds(230, 48, 138, 16);
		//}
		return usrNameDO;
	}

	private JLabel getDoPassLabel() {
		//if(doPassLabel == null) {
		doPassLabel = new JLabel();
		doPassLabel.setText("Enter Your Password");
		doPassLabel.setBounds(230, 98, 127, 16);
		//}
		return doPassLabel;
	}

	private JMenu getJMenu1() {
		//if(jMenu1 == null) {
		jMenu1 = new JMenu();
		jMenu1.setText("File");
		jMenu1.add(getLoginMnuItm());

		//	jMenu1.add(getDatabaseTasksItm());
		jMenu1.add(getSaveDataMnuItm());
		jMenu1.add(getCloseMnuItm());
		jMenu1.add(getQuitMnuItm());
		//}
		return jMenu1;
	}
	//TODO Actionlistner and Accelerator
	private JMenuItem getLoginMnuItm() {
		//if(LoginMnuItm == null) {
		LoginMnuItm = new JMenuItem();
		LoginMnuItm.setText("Login");
		//Hot key for Login ctrl L
		LoginMnuItm.setAccelerator(KeyStroke.getKeyStroke("ctrl L"));
		//action listner to open login window when the menuitm is invoked
		//Will work if not logged in or else is disabled
		LoginMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				//System.out.println("LoginMnuItm.actionPerformed, event="+evt);
				//PasswordFrame.setVisible(true);
				getPasswordFrame();
				PasswordFrame.setVisible(true);

			}
		});




		//}
		return LoginMnuItm;
	}

	private JMenuItem getQuitMnuItm() {
		//if(QuitMnuItm == null) {
		QuitMnuItm = new JMenuItem();
		QuitMnuItm.setText("Quit");
		//Hot Key ctrl Q to Quit
		QuitMnuItm.setAccelerator(KeyStroke.getKeyStroke("ctrl Q"));
		//action listner close system
		QuitMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt){
				MainTextArea.setText("");
				//TODO Runtime Extra Code GarbageCollector
				Runtime.getRuntime().gc();
				System.exit(0);
			}
		}


				);

		//}
		return QuitMnuItm;
	}

	private JMenuItem getCloseMnuItm() {
		//if(CloseMnuItm == null) {
		CloseMnuItm = new JMenuItem();
		CloseMnuItm.setText("Close Data");
		//Hot key to close data CTRL C
		CloseMnuItm.setAccelerator(KeyStroke.getKeyStroke("ctrl C"));
		//Action event to close data
		CloseMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				//technically this will not 'close' the data but
				//rather it will clear the maintextarea
				//later revsions of the software may actually close the database connection
				//so that the user will be able to select a new database

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					MainTextArea.setText("You are now logged in "+txtUsrName.getText()+"." +
							"\n"+"You now have Access to the system." +
							"\n\nThe Data has been closed as to your request.");
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}



			}
		});
		//}
		return CloseMnuItm;
	}

	private JMenu getEditMnuItm() {
		//if(EditMnuItm == null) {
		EditMnuItm = new JMenu();
		EditMnuItm.setText("Edit");
		EditMnuItm.add(getAddDataMnuItm());
		//}
		return EditMnuItm;
	}

	private JMenu getHelpMnu() {
		//if(HelpMnu == null) {
		HelpMnu = new JMenu();
		HelpMnu.setText("Help");
		HelpMnu.add(getHelpSelectItm());
		HelpMnu.add(getAboutMnuItm());
		//}
		return HelpMnu;
	}

	private JMenu getAddDataMnuItm() {
		//if(AddDataMnuItm == null) {
		AddDataMnuItm = new JMenu();
		AddDataMnuItm.setText("Add Data");
		AddDataMnuItm.add(getAddTxtItm());
		AddDataMnuItm.add(getAddDBaseDataItm());

		//}
		return AddDataMnuItm;
	}

	private JMenuItem getHelpSelectItm() {
		//if(HelpSelectItm == null) {
		HelpSelectItm = new JMenuItem();
		HelpSelectItm.setText("Help");
		//Hot key for help F1
		HelpSelectItm.setAccelerator(KeyStroke.getKeyStroke("F1"));
		
		//JOptionPane
		//http://stackoverflow.com/questions/2546968/open-pdf-file-on-fly-from-java-application
		HelpSelectItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					Desktop.getDesktop().open(new File("Help.pdf"));
				} catch (IOException e) {
					// TODO Auto-generated catch block
					//e.printStackTrace();
					JOptionPane.showMessageDialog(null, "Error Opening Help File.\nPlese check Your PDF Reader Application","Error Opening Help",JOptionPane.ERROR_MESSAGE);
				}
			}});
		//}

		return HelpSelectItm;
	}

	private JMenuItem getAboutMnuItm() {
		//if(AboutMnuItm == null) {
		AboutMnuItm = new JMenuItem();
		AboutMnuItm.setText("About");
		//hotkey ctrl shift A
		AboutMnuItm.setAccelerator(KeyStroke.getKeyStroke("ctrl shift A"));
		AboutMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				JOptionPane.showMessageDialog(null,"GeoInfo Access programmed by Jason Chalom 12S\n" +
						"\n" +
						"Made on The Java 1.7 platform by Oracle Systems\n" +
						"Makes use of the Microsoft Access Database System\n" +
						"2012" , "GeoInfo Access", JOptionPane.INFORMATION_MESSAGE);
			}});


		//}
		return AboutMnuItm;
	}

	private JFrame getAddDataFrame() {
		//if(AddDataFrame == null) {
		AddDataFrame = new JFrame();
		AddDataFrame.setTitle("Enter Your Data");
		AddDataFrame.getContentPane().setLayout(null);
		AddDataFrame.setPreferredSize(new java.awt.Dimension(599, 697));
		AddDataFrame.getContentPane().add(getSiteDataLabel());
		AddDataFrame.getContentPane().add(getEcologicalDataLabel());
		AddDataFrame.getContentPane().add(getGermorphDataLabel());
		AddDataFrame.getContentPane().add(getSiteNameIn());
		AddDataFrame.getContentPane().add(getSiteNameLabel());
		AddDataFrame.getContentPane().add(getJSeparator1());
		AddDataFrame.getContentPane().add(getJSeparator2());
		AddDataFrame.getContentPane().add(getSiteLocationLabel());
		AddDataFrame.getContentPane().add(getSiteLocationInTxt());
		AddDataFrame.getContentPane().add(getJSeparator3());
		AddDataFrame.getContentPane().add(getClimatologicalDataLabel());
		AddDataFrame.getContentPane().add(getPhosphatesLabel());
		AddDataFrame.getContentPane().add(getSulphatesLabel());
		AddDataFrame.getContentPane().add(getNitratesLabel());
		AddDataFrame.getContentPane().add(getAnimalAmouLabel());
		AddDataFrame.getContentPane().add(getPlantAmountLabel());
		AddDataFrame.getContentPane().add(getEcologicalPhosphate());
		AddDataFrame.getContentPane().add(getEcologicalSulphates());
		AddDataFrame.getContentPane().add(getEcologicalNitrates());
		AddDataFrame.getContentPane().add(getEcologicalAnimalAmounts());
		AddDataFrame.getContentPane().add(getEcologicalAmountPlants());
		AddDataFrame.getContentPane().add(getRainfallLabel());
		AddDataFrame.getContentPane().add(getWindSpdLabel());
		AddDataFrame.getContentPane().add(getAirPrLabel());
		AddDataFrame.getContentPane().add(getPercentCloudLabel());
		AddDataFrame.getContentPane().add(getCancelInputData());
		AddDataFrame.getContentPane().add(getIsFieldSurveyLabel());
		AddDataFrame.getContentPane().add(getFieldSurveyTick());
		AddDataFrame.getContentPane().add(getGermorphNitrateLabel());
		AddDataFrame.getContentPane().add(getGermorphBact());
		AddDataFrame.getContentPane().add(getGermorphPH());
		AddDataFrame.getContentPane().add(getGermorphRiverVeloLabel());
		AddDataFrame.getContentPane().add(getGermorphDepthLabel());
		AddDataFrame.getContentPane().add(getGermorphWidth());
		AddDataFrame.getContentPane().add(getNoteInputLabel());
		AddDataFrame.getContentPane().add(getRainFallAmount());
		AddDataFrame.getContentPane().add(getWindSpd());
		AddDataFrame.getContentPane().add(getAirPressure());
		AddDataFrame.getContentPane().add(getCloudCover());
		AddDataFrame.getContentPane().add(getNitratesWater());
		AddDataFrame.getContentPane().add(getBacteriaWater());
		AddDataFrame.getContentPane().add(getPHWater());
		AddDataFrame.getContentPane().add(getRiverVelocity());
		AddDataFrame.getContentPane().add(getRiverDepth());
		AddDataFrame.getContentPane().add(getRiverWidth());
		AddDataFrame.getContentPane().add(getEnterSiteDataButton());
		AddDataFrame.getContentPane().add(getEcologyDataButton());
		AddDataFrame.getContentPane().add(getClimaticDataButton());
		AddDataFrame.getContentPane().add(getEnterDataButton());
		AddDataFrame.setSize(599, 697);
		//}
		return AddDataFrame;
	}

	private JMenu getSettingsMnu() {
		//if(SettingsMnu == null) {
		SettingsMnu = new JMenu();
		SettingsMnu.setText("Settings");

		SettingsMnu.add(getExportUsrsMnuItm());
		SettingsMnu.add(getPreferencesMnuItm());
		//}
		return SettingsMnu;
	}

	private JLabel getSiteDataLabel() {
		//if(SiteDataLabel == null) {
		SiteDataLabel = new JLabel();
		SiteDataLabel.setText("Site Data");
		SiteDataLabel.setBounds(12, 6, 568, 25);
		SiteDataLabel.setFont(new java.awt.Font("Comic Sans MS",1,14));
		//}
		return SiteDataLabel;
	}

	private JLabel getEcologicalDataLabel() {
		//if(EcologicalDataLabel == null) {
		EcologicalDataLabel = new JLabel();
		EcologicalDataLabel.setText("Ecological Data");
		EcologicalDataLabel.setBounds(12, 132, 99, 21);
		EcologicalDataLabel.setFont(new java.awt.Font("Comic Sans MS",1,12));
		//}
		return EcologicalDataLabel;
	}

	private JLabel getGermorphDataLabel() {
		//if(GermorphDataLabel == null) {
		GermorphDataLabel = new JLabel();
		GermorphDataLabel.setText("Germorphological Data");
		GermorphDataLabel.setBounds(12, 454, 586, 21);
		GermorphDataLabel.setFont(new java.awt.Font("Comic Sans MS",1,12));
		//}
		return GermorphDataLabel;
	}

	private JTextField getSiteNameIn() {
		//if(SiteNameIn == null) {
		SiteNameIn = new JTextField();
		SiteNameIn.setBounds(217, 34, 350, 21);
		//}
		return SiteNameIn;
	}

	private JLabel getSiteNameLabel() {
		//if(SiteNameLabel == null) {
		SiteNameLabel = new JLabel();
		SiteNameLabel.setText("Enter Site Name e.g. Site 1");
		SiteNameLabel.setBounds(12, 37, 152, 16);
		//}
		return SiteNameLabel;
	}

	private JSeparator getJSeparator1() {
		//if(jSeparator1 == null) {
		jSeparator1 = new JSeparator();
		jSeparator1.setBounds(-1, 125, 590, 8);
		//}
		return jSeparator1;
	}

	private JSeparator getJSeparator2() {
		//if(jSeparator2 == null) {
		jSeparator2 = new JSeparator();
		jSeparator2.setBounds(0, 453, 580, 10);
		//}
		return jSeparator2;
	}

	private JButton getEnterDataButton() {
		//if(EnterDataButton == null) {
		EnterDataButton = new JButton();
		EnterDataButton.setText("Enter Germorphological Data");
		EnterDataButton.setBounds(364, 599, 203, 28);
		EnterDataButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				//display Site List
				//will add to maintextarea so user can chooser a site to use
				QueryCode = "SELECT SiteID, SiteName, SiteLocation FROM tblSite";
				String SiteList = DBLink.Display(QueryCode);
				QueryCode = "";
				JOptionPane.showMessageDialog(null, "\n\nSite List to Use:\n"+SiteList);

				String msg = "";
				msg += "\n"+addData.AddGermorph
						(NitratesWater.getText(), 
								BacteriaWater.getText(), pHWater.getText(), 
								RiverVelocity.getText(), RiverDepth.getText(), 
								RiverWidth.getText());



				//send msg to main text area
				MainTextArea.setText("Results of adding Ecology Data:\n\n"+msg);
				//close the add data window
				AddDataFrame.dispose();

			}
		});
		//}
		return EnterDataButton;
	}

	private JLabel getSiteLocationLabel() {
		//if(SiteLocationLabel == null) {
		SiteLocationLabel = new JLabel();
		SiteLocationLabel.setText("Enter Site Location e.g. Bruma");
		SiteLocationLabel.setBounds(12, 65, 178, 14);
		//}
		return SiteLocationLabel;
	}

	private JTextField getSiteLocationInTxt() {
		//if(SiteLocationInTxt == null) {
		SiteLocationInTxt = new JTextField();
		SiteLocationInTxt.setBounds(217, 61, 350, 20);
		//}
		return SiteLocationInTxt;
	}

	private JSeparator getJSeparator3() {
		//if(jSeparator3 == null) {
		jSeparator3 = new JSeparator();
		jSeparator3.setBounds(0, 328, 585, 9);
		//}
		return jSeparator3;
	}

	private JLabel getClimatologicalDataLabel() {
		//if(ClimatologicalDataLabel == null) {
		ClimatologicalDataLabel = new JLabel();
		ClimatologicalDataLabel.setText("Climatological Data");
		ClimatologicalDataLabel.setBounds(11, 332, 581, 22);
		ClimatologicalDataLabel.setFont(new java.awt.Font("Comic Sans MS",1,12));
		//}
		return ClimatologicalDataLabel;
	}

	private JMenuItem getSaveDataMnuItm() {
		//if(ExportDataMnuItm == null) {
		ExportDataMnuItm = new JMenuItem();
		ExportDataMnuItm.setText("Export Data to File");
		//Hot key ctrl S 
		ExportDataMnuItm.setAccelerator(KeyStroke.getKeyStroke("ctrl S"));
		//Action listner to call up the save dialog ExportDatajFileChooser
		ExportDataMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					getExportDatajFileChooser();
					String fileSaveMsg = savefile.ExportData(SaveData, MainTextArea.getText());

					if	(savefile.getErrorMessages() == null)
					{
						JOptionPane.showMessageDialog(null, fileSaveMsg);
					}
					else
					{
						JOptionPane.showMessageDialog(null, savefile.getErrorMessages(),"Error Saving File",JOptionPane.ERROR_MESSAGE);
					}

				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}

			}
		});
		//}
		return ExportDataMnuItm;
	}

	private JLabel getPhosphatesLabel() {
		//if(PhosphatesLabel == null) {
		PhosphatesLabel = new JLabel();
		PhosphatesLabel.setText("Enter Amount of Phosphates mg/l");
		PhosphatesLabel.setBounds(12, 158, 222, 24);
		//}
		return PhosphatesLabel;
	}

	private JLabel getSulphatesLabel() {
		//if(SulphatesLabel == null) {
		SulphatesLabel = new JLabel();
		SulphatesLabel.setText("Enter Amount of Sulphates mg/l");
		SulphatesLabel.setBounds(12, 192, 182, 21);
		//}
		return SulphatesLabel;
	}

	private JLabel getNitratesLabel() {
		//if(NitratesLabel == null) {
		NitratesLabel = new JLabel();
		NitratesLabel.setText("Enter Amount of Nitrates mg/l");
		NitratesLabel.setBounds(12, 223, 184, 19);
		//}
		return NitratesLabel;
	}

	private JLabel getAnimalAmouLabel() {
		//if(AnimalAmouLabel == null) {
		AnimalAmouLabel = new JLabel();
		AnimalAmouLabel.setText("Enter Animal Amounts");
		AnimalAmouLabel.setBounds(12, 250, 163, 19);
		//}
		return AnimalAmouLabel;
	}

	private JLabel getPlantAmountLabel() {
		//if(PlantAmountLabel == null) {
		PlantAmountLabel = new JLabel();
		PlantAmountLabel.setText("Enter Amount of Plants");
		PlantAmountLabel.setBounds(12, 276, 154, 19);
		//}
		return PlantAmountLabel;
	}

	private JTextField getEcologicalPhosphate() {
		//if(EcologicalPhosphate == null) {
		EcologicalPhosphate = new JTextField();
		EcologicalPhosphate.setBounds(283, 160, 172, 24);
		EcologicalPhosphate.setFont(new java.awt.Font("Segoe UI",0,10));
		//}
		return EcologicalPhosphate;
	}

	private JTextField getEcologicalSulphates() {
		//if(EcologicalSulphates == null) {
		EcologicalSulphates = new JTextField();
		EcologicalSulphates.setBounds(283, 192, 172, 24);
		EcologicalSulphates.setFont(new java.awt.Font("Segoe UI",0,10));
		//}
		return EcologicalSulphates;
	}

	private JTextField getEcologicalNitrates() {
		//if(EcologicalNitrates == null) {
		EcologicalNitrates = new JTextField();
		EcologicalNitrates.setBounds(283, 222, 172, 21);
		EcologicalNitrates.setFont(new java.awt.Font("Segoe UI",0,10));
		//}
		return EcologicalNitrates;
	}

	private JTextField getEcologicalAnimalAmounts() {
		//if(EcologicalAnimalAmounts == null) {
		EcologicalAnimalAmounts = new JTextField();
		EcologicalAnimalAmounts.setBounds(283, 248, 172, 22);
		EcologicalAnimalAmounts.setFont(new java.awt.Font("Segoe UI",0,10));
		//}
		return EcologicalAnimalAmounts;
	}

	private JTextField getEcologicalAmountPlants() {
		//if(EcologicalAmountPlants == null) {
		EcologicalAmountPlants = new JTextField();
		EcologicalAmountPlants.setBounds(283, 274, 172, 23);
		EcologicalAmountPlants.setFont(new java.awt.Font("Segoe UI",0,10));
		//}
		return EcologicalAmountPlants;
	}

	private JLabel getRainfallLabel() {
		//if(RainfallLabel == null) {
		RainfallLabel = new JLabel();
		RainfallLabel.setText("Enter Rainfall Amounts in mm per event");
		RainfallLabel.setBounds(11, 352, 580, 24);
		//}
		return RainfallLabel;
	}

	private JLabel getWindSpdLabel() {
		//if(WindSpdLabel == null) {
		WindSpdLabel = new JLabel();
		WindSpdLabel.setText("Enter Wind Speed At Test Site");
		WindSpdLabel.setBounds(12, 381, 582, 15);
		//}
		return WindSpdLabel;
	}

	private JLabel getAirPrLabel() {
		//if(AirPrLabel == null) {
		AirPrLabel = new JLabel();
		AirPrLabel.setText("Enter Air Pressure in hPa");
		AirPrLabel.setBounds(12, 401, 581, 18);
		//}
		return AirPrLabel;
	}

	private JLabel getPercentCloudLabel() {
		//if(percentCloudLabel == null) {
		percentCloudLabel = new JLabel();
		percentCloudLabel.setText("Enter Percentage of Cloud Cover");
		percentCloudLabel.setBounds(12, 421, 584, 25);
		//}
		return percentCloudLabel;
	}

	private JButton getCancelInputData() {
		//if(CancelInputData == null) {
		CancelInputData = new JButton();
		CancelInputData.setText("Cancel");
		CancelInputData.setBounds(498, 629, 78, 25);
		//actionlistner to close the window
		CancelInputData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				AddDataFrame.dispose();

			}
		});
		//}
		return CancelInputData;
	}

	private JLabel getIsFieldSurveyLabel() {
		//if(IsFieldSurveyLabel == null) {
		IsFieldSurveyLabel = new JLabel();
		IsFieldSurveyLabel.setText("Is There a Field Survey?");
		IsFieldSurveyLabel.setBounds(12, 305, 146, 17);
		//}
		return IsFieldSurveyLabel;
	}

	private JCheckBox getFieldSurveyTick() {
		//if(FieldSurveyTick == null) {
		FieldSurveyTick = new JCheckBox();
		FieldSurveyTick.setBounds(283, 306, 20, 15);
		//}
		return FieldSurveyTick;
	}

	private JLabel getGermorphNitrateLabel() {
		//if(GermorphNitrateLabel == null) {
		GermorphNitrateLabel = new JLabel();
		GermorphNitrateLabel.setText("Enter Amount of Nitrates in Water");
		GermorphNitrateLabel.setBounds(12, 475, 226, 16);
		//}
		return GermorphNitrateLabel;
	}

	private JLabel getGermorphBact() {
		//if(GermorphBact == null) {
		GermorphBact = new JLabel();
		GermorphBact.setText("Enter Amount of Bacteria in Water");
		GermorphBact.setBounds(12, 493, 232, 16);
		//}
		return GermorphBact;
	}

	private JLabel getGermorphPH() {
		//if(GermorphPH == null) {
		GermorphPH = new JLabel();
		GermorphPH.setText("Enter pH of Water");
		GermorphPH.setBounds(12, 511, 152, 17);
		//}
		return GermorphPH;
	}

	private JLabel getGermorphRiverVeloLabel() {
		//if(GermorphRiverVeloLabel == null) {
		GermorphRiverVeloLabel = new JLabel();
		GermorphRiverVeloLabel.setText("Enter River Velocity");
		GermorphRiverVeloLabel.setBounds(12, 533, 152, 14);
		//}
		return GermorphRiverVeloLabel;
	}

	private JLabel getGermorphDepthLabel() {
		//if(GermorphDepthLabel == null) {
		GermorphDepthLabel = new JLabel();
		GermorphDepthLabel.setText("Enter Depth of River");
		GermorphDepthLabel.setBounds(12, 554, 166, 15);
		//}
		return GermorphDepthLabel;
	}

	private JLabel getGermorphWidth() {
		//if(GermorphWidth == null) {
		GermorphWidth = new JLabel();
		GermorphWidth.setText("Enter Width of River");
		GermorphWidth.setBounds(12, 573, 218, 17);
		//}
		return GermorphWidth;
	}

	private JLabel getNoteInputLabel() {
		//if(NoteInputLabel == null) {
		NoteInputLabel = new JLabel();
		NoteInputLabel.setText("Please note that if some sections are not inputted, leave the text fields blank.");
		NoteInputLabel.setBounds(7, 630, 517, 23);
		NoteInputLabel.setFont(new java.awt.Font("Comic Sans MS",1,12));
		//}
		return NoteInputLabel;
	}

	private JTextField getRainFallAmount() {
		//if(RainFallAmount == null) {
		RainFallAmount = new JTextField();
		RainFallAmount.setBounds(257, 353, 145, 20);
		//}
		return RainFallAmount;
	}

	private JTextField getWindSpd() {
		//if(WindSpd == null) {
		WindSpd = new JTextField();
		WindSpd.setBounds(257, 378, 145, 20);
		//}
		return WindSpd;
	}

	private JTextField getAirPressure() {
		//if(AirPressure == null) {
		AirPressure = new JTextField();
		AirPressure.setBounds(257, 401, 145, 20);
		//}
		return AirPressure;
	}

	private JTextField getCloudCover() {
		//if(CloudCover == null) {
		CloudCover = new JTextField();
		CloudCover.setBounds(257, 425, 145, 21);
		//}
		return CloudCover;
	}

	private JTextField getNitratesWater() {
		//if(NitratesWater == null) {
		NitratesWater = new JTextField();
		NitratesWater.setBounds(256, 468, 146, 24);
		//}
		return NitratesWater;
	}

	private JTextField getBacteriaWater() {
		//if(BacteriaWater == null) {
		BacteriaWater = new JTextField();
		BacteriaWater.setBounds(256, 493, 146, 18);
		//}
		return BacteriaWater;
	}

	private JTextField getPHWater() {
		//if(pHWater == null) {
		pHWater = new JTextField();
		pHWater.setBounds(256, 511, 146, 19);
		//}
		return pHWater;
	}

	private JTextField getRiverVelocity() {
		//if(RiverVelocity == null) {
		RiverVelocity = new JTextField();
		RiverVelocity.setBounds(256, 530, 146, 20);
		//}
		return RiverVelocity;
	}

	private JTextField getRiverDepth() {
		//if(RiverDepth == null) {
		RiverDepth = new JTextField();
		RiverDepth.setBounds(256, 550, 146, 19);
		//}
		return RiverDepth;
	}

	private JTextField getRiverWidth() {
		//if(RiverWidth == null) {
		RiverWidth = new JTextField();
		RiverWidth.setBounds(256, 571, 146, 22);
		//}
		return RiverWidth;
	}

	private JMenuItem getPreferencesMnuItm() {
		//if(PreferencesMnuItm == null) {
		PreferencesMnuItm = new JMenuItem();
		PreferencesMnuItm.setText("Preferences");
		//hotkey for preferences ctrl P
		PreferencesMnuItm.setAccelerator(KeyStroke.getKeyStroke("ctrl P"));
		//Action Event to open the settings window
		PreferencesMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					getSettingsFrame();
					SettingsFrame.setVisible(true);
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}

			}
		});
		//}
		return PreferencesMnuItm;
	}

	private JButton getPassCancel() {
		//if(passCancel == null)	{
		passCancel = new JButton();
		PasswordFrame.getContentPane().add(passCancel);
		passCancel.setText("Cancel");
		passCancel.setBounds(348, 154, 82, 25);
		passCancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				//PasswordFrame.d
				//close the password frame without doin any action
				PasswordFrame.dispose();
				//PasswordFrame.setVisible(false);
			}});
		//}

		return passCancel;
	}

	private JFrame getSettingsFrame() {
		//if(SettingsFrame == null) {
		SettingsFrame = new JFrame();
		SettingsFrame.setPreferredSize(new java.awt.Dimension(554, 339));
		SettingsFrame.setSize(554, 339);
		SettingsFrame.setTitle("Settings");
		SettingsFrame.getContentPane().add(getSettingsPanel(), BorderLayout.CENTER);
		//}
		return SettingsFrame;
	}

	private JMenuItem getAddTxtItm() {
		//if(AddTxtItm == null) {
		AddTxtItm = new JMenuItem();
		AddTxtItm.setText("Add Field Survey Text File");
		//Hot Key Ctrl AS
		AddTxtItm.setAccelerator(KeyStroke.getKeyStroke("alt A"));
		//Action listner to call up the survey JFileChooser
		AddTxtItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					//open the open dialogue which will open a survey file
					getAddSurveyJFileChooser();
					//use the OpenFile class to open the survey and put it on the MainTExtArea
					//if there is no error display the survey in maintextarea
					String Survey = openfile.OpenSurvey(SurveyPath);
					if (!Survey.contains("Error"))
					{
						MainTextArea.setText("Survey has been loaded and path saved to database.\n\nSurvey:\n\n"+Survey);
						//will add to maintextarea so user can chooser a site to use
						QueryCode = "SELECT SiteID, SiteName, SiteLocation FROM tblSite";
						String SiteList = DBLink.Display(QueryCode);
						QueryCode = "";
						MainTextArea.append("\n\nSite List to Use:\n"+SiteList);
						//use the DBCode class to update databse the survey table
						int surveySiteID = Integer.parseInt(JOptionPane.showInputDialog("Enter the SiteID for the survey you would like to add to the system"));
						//The survey path will not be stored in the db but rather just the file name
						//the user must find and open the survey file
						QueryCode = "INSERT INTO tblSurvey (TextFileName, UserID, SiteID) VALUES ('"+SurveyPath.getName()+"', "+USerDBID+", "+surveySiteID+")";//'dd',1);";
						DBLink.Execute(QueryCode);
						QueryCode = "";
						JOptionPane.showMessageDialog (null, "Survey was Added to the Database");
					}
					else
					{
						JOptionPane.showMessageDialog(null, "The survey file which was selected is invalid" +
								"\nPlease select a valid survey file.","Survey File is Invalid",JOptionPane.ERROR_MESSAGE);
					}

				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});
		//}
		return AddTxtItm;
	}

	private JMenuItem getAddDBaseDataItm() {
		//if(AddDBaseDataItm == null) {
		AddDBaseDataItm = new JMenuItem();
		AddDBaseDataItm.setText("Add Database Value Data");
		//hot key Ctrl A
		AddDBaseDataItm.setAccelerator(KeyStroke.getKeyStroke("ctrl A"));
		//Action Listner to call up the AddDataFrame
		AddDBaseDataItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					//open the window to add data to the db
					getAddDataFrame();
					AddDataFrame.setVisible(true);
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});
		//}
		return AddDBaseDataItm;
	}

	//Data Tasks begin here:
	//each task is described within the allotted setText
	private JMenu getDataTasksMnu() {
		//	if(DataTasksMnu == null) {
		DataTasksMnu = new JMenu();
		DataTasksMnu.setText("Data Tasks");
		//DataTasksMnu.add(getDispUsrItm());
		DataTasksMnu.add(getDispListUsrs());
		DataTasksMnu.add(getDispSiteData());
		DataTasksMnu.add(getDispEcologyData());
		DataTasksMnu.add(getDispClimateData());
		DataTasksMnu.add(getDispGermorphData());
		DataTasksMnu.add(getDispMeanData());
		DataTasksMnu.add(getDispDispersionData());
		DataTasksMnu.add(getDispListSurveyMnuItm());

		//}
		return DataTasksMnu;
	}

	//this item was removed since there is another option to save user information in a text file
	//using arrays
	//private JMenuItem getDispUsrItm() {
	//if(DispUsrItm == null) {
	//lauches query to Display all users
	//	DispUsrItm = new JMenuItem();
	//	DispUsrItm.setText("Display All Users");
	//	DispUsrItm.addActionListener(new ActionListener() {
	//		public void actionPerformed(ActionEvent arg0) {
	// Action Listner to perform task
	//check if logged in the execute action or display error message
	//		if (isLoggedin == true)
	//		{
	//			QueryCode = "SELECT UserID, Username, email FROM tblUser";
	//			MainTextArea.setText(DBLink.Display(QueryCode));
	//			QueryCode = "";
	//		}
	//		else
	//		{
	//			JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

	//		}


	//	}
	//});
	//
	//}
	//return DispUsrItm;
	//}

	private JMenuItem getDispSiteData() {
		//if(DispSiteData == null) {
		//lauches query to Display Specific Site Data
		DispSiteData = new JMenuItem();
		DispSiteData.setText("Display Specific Site Data");
		DispSiteData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					QueryCode = "SELECT tblSite.SiteID, tblSite.SiteName, " +
							"tblClimate.[RainfallAmnt(mm)], " +
							"tblClimate.[WindSpeed(kts)], " +
							"tblClimate.[AirPressure(hPa)], " +
							"tblClimate.PercentageCloudCover, " +
							"tblGermorph.Bacteria " +
							"FROM ((tblSite INNER JOIN tblClimate ON " +
							"tblSite.SiteID = tblClimate.SiteID) " +
							"INNER JOIN tblEcology ON tblSite.SiteID = " +
							"tblEcology.SiteID) INNER JOIN tblGermorph ON " +
							"tblSite.SiteID = tblGermorph.SiteID; ";
					MainTextArea.setText(DBLink.Display(QueryCode));
					QueryCode = "";
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});
		//}
		return DispSiteData;
	}

	private JMenuItem getDispEcologyData() {
		//if(DispEcologyData == null) {
		//When action is performed SQL to display all ecological data will be executed
		DispEcologyData = new JMenuItem();
		DispEcologyData.setText("Display Ecological Data");
		DispEcologyData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					QueryCode = 
							"SELECT * FROM tblEcology;";

					MainTextArea.setText(DBLink.Display(QueryCode));
					QueryCode = "";
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});

		//}
		return DispEcologyData;
	}

	private JMenuItem getDispClimateData() {
		//if(DispClimateData == null) {
		//will execute sql to display all climatic data
		DispClimateData = new JMenuItem();
		DispClimateData.setText("Display Climatic Data");
		DispClimateData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					QueryCode = 
							"SELECT * FROM tblClimate;";

					MainTextArea.setText(DBLink.Display(QueryCode));
					QueryCode = "";
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});

		//}
		return DispClimateData;
	}

	private JMenuItem getDispGermorphData() {
		//if(DispGermorphData == null) {
		//Execute SQL to display all Germorph data
		DispGermorphData = new JMenuItem();
		DispGermorphData.setText("Display Geomorphological Data");
		DispGermorphData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					QueryCode = 
							"SELECT *FROM tblGermorph;";

					MainTextArea.setText(DBLink.Display(QueryCode));
					QueryCode = "";
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});

		//}
		return DispGermorphData;
	}

	private JMenuItem getDispMeanData() {
		//if(DispMeanData == null) {
		//Execute SQL to display Mean data per Site
		DispMeanData = new JMenuItem();
		DispMeanData.setText("Display Mean Data Per Site");
		DispMeanData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					QueryCode = 
							"SELECT tblSite.SiteID, AVG(tblClimate.[RainfallAmnt(mm)]) " +
									"AS [Mean RainfallAmnt], AVG(tblClimate.[WindSpeed(kts)]) AS " +
									"[Mean WindSpd(kts)], AVG(tblClimate.[AirPressure(hPa)]) " +
									"AS [Mean AirPressure(hPa)], AVG(tblClimate.PercentageCloudCover) " +
									"AS [Mean PercentageCloudCover], AVG(tblGermorph.Bacteria) " +
									"AS [Mean Bacteria] FROM ((tblSite INNER JOIN tblGermorph " +
									" ON tblSite.SiteID = tblGermorph.SiteID) INNER JOIN tblEcology ON " +
									"tblSite.SiteID = tblEcology.SiteID) INNER JOIN tblClimate ON " +
									"tblSite.SiteID = tblClimate.SiteID GROUP BY tblSite.SiteID";

					MainTextArea.setText(DBLink.Display(QueryCode));
					QueryCode = "";
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});

		//}
		return DispMeanData;
	}

	private JMenuItem getDispDispersionData() {
		//if(DispDispersionData == null) {
		//SQL code to Display Dispersion of Data
		DispDispersionData = new JMenuItem();
		DispDispersionData.setText("Display Dispersion of Data");
		DispDispersionData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{
					QueryCode = 
							"SELECT tblSite.SiteID, StDev(tblClimate.[RainfallAmnt(mm)])" +
									" AS [Deviation RainfallAmnt], StDev(tblClimate.[WindSpeed(kts)])" +
									" AS [Deviation WindSpd(kts)], StDev(tblClimate.[AirPressure(hPa)])" +
									" AS [Deviation AirPressure(hPa)], StDev(tblClimate.PercentageCloudCover)" +
									" AS [Deviation PercentageCloudCover], StDev(tblGermorph.Bacteria)" +
									" AS [Deviation Bacteria] FROM ((tblSite INNER JOIN tblEcology" +
									" ON tblSite.SiteID = tblEcology.SiteID) INNER JOIN tblGermorph" +
									" ON tblSite.SiteID = tblGermorph.SiteID) INNER JOIN tblClimate" +
									" ON tblSite.SiteID = tblClimate.SiteID GROUP BY tblSite.SiteID";

					MainTextArea.setText(DBLink.Display(QueryCode));
					QueryCode = "";
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});

		//}
		return DispDispersionData;
	}

	private JPanel getSettingsPanel() {
		//if(SettingsPanel == null) {
		SettingsPanel = new JPanel();
		SettingsPanel.setLayout(null);
		SettingsPanel.setPreferredSize(new java.awt.Dimension(553, 401));
		SettingsPanel.add(getUsrSetLbl());
		SettingsPanel.add(getJSeparatorUsrSettings());
		SettingsPanel.add(getOldPassSetLbl());
		SettingsPanel.add(getNewPassLblSet());
		SettingsPanel.add(getOldPassSet());
		SettingsPanel.add(getNewPassSet());
		SettingsPanel.add(getChangePassButton());
		SettingsPanel.add(getChangePassLbl());
		SettingsPanel.add(getAddUsrLblSet());
		SettingsPanel.add(getUsrNameLbl());
		SettingsPanel.add(getNewPassLbl());
		SettingsPanel.add(getNewUsrNameSet());
		SettingsPanel.add(getNewUsrPassSet());
		SettingsPanel.add(getAddUsrButton());
		SettingsPanel.add(getJSeparatorUsrSettings1());
		SettingsPanel.add(getJSeparatorUsrSettings2());
		SettingsPanel.add(getJSeparatorUsrSettings3());
		SettingsPanel.add(getJSeparatorUsrSettings4());
		SettingsPanel.add(getJSeparatorUsrSettings5());
		SettingsPanel.add(getCloseSettingsButton());
		SettingsPanel.add(getNewEmailLbl());
		SettingsPanel.add(getNewTruNameLbl());
		SettingsPanel.add(getNewEmailTxtFiled());
		SettingsPanel.add(getNewTrueNameTxt());
		SettingsPanel.add(getJSeparatorUsrSettings6());
		//}
		return SettingsPanel;
	}

	private JLabel getUsrSetLbl() {
		//if(UsrSetLbl == null) {
		UsrSetLbl = new JLabel();
		UsrSetLbl.setText("User:");
		UsrSetLbl.setBounds(260, 13, 36, 17);
		//}
		return UsrSetLbl;
	}

	private JSeparator getJSeparatorUsrSettings() {
		//if(jSeparatorUsrSettings == null) {
		jSeparatorUsrSettings = new JSeparator();
		jSeparatorUsrSettings.setBounds(7, 12, 521, 10);
		//}
		return jSeparatorUsrSettings;
	}

	private JLabel getOldPassSetLbl() {
		//if(OldPassSetLbl == null) {
		OldPassSetLbl = new JLabel();
		OldPassSetLbl.setText("Old Password:");
		OldPassSetLbl.setBounds(19, 79, 86, 17);
		//}
		return OldPassSetLbl;
	}

	private JLabel getNewPassLblSet() {
		//if(NewPassLblSet == null) {
		NewPassLblSet = new JLabel();
		NewPassLblSet.setText("New Password:");
		NewPassLblSet.setBounds(19, 109, 93, 17);
		//}
		return NewPassLblSet;
	}

	private JTextField getOldPassSet() {
		//if(OldPassSet == null) {
		OldPassSet = new JTextField();
		OldPassSet.setBounds(117, 77, 137, 23);
		//}
		return OldPassSet;
	}

	private JTextField getNewPassSet() {
		//if(NewPassSet == null) {
		NewPassSet = new JTextField();
		NewPassSet.setBounds(117, 106, 137, 23);
		//}
		return NewPassSet;
	}

	private JButton getChangePassButton() {
		//if(ChangePassButton == null) {
		ChangePassButton = new JButton();
		ChangePassButton.setText("Go!");
		ChangePassButton.setBounds(194, 134, 57, 21);
		ChangePassButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//will check if old password matches the current one
				//if so will change password 
				//if not will display an error message
				String oldPasswordDb = "";
				QueryCode = "SELECT Password FROM tblUser WHERE UserID like '"+USerDBID+"';";
				oldPasswordDb = DBLink.DisplayWithoutHeadings(QueryCode);
				QueryCode = "";
				if (oldPasswordDb.contains(OldPassSet.getText()))
				{
					//will change password
					QueryCode = "UPDATE tblUser SET Password = '"+NewPassSet.getText()+"' WHERE UserID = "+USerDBID+";";
					String msg = DBLink.Execute(QueryCode);
					QueryCode = "";
					if (msg.contains("SQL Executed"))
					{
						//display message
						JOptionPane.showMessageDialog(null, "User Password has been changed.");
					}

				}
				else
				{
					//display error
					JOptionPane.showMessageDialog (null, "The current password which was entered is incorrect.\nPlease try again with the correct password.", "Incorrect Password", JOptionPane.ERROR_MESSAGE);
				}


			}
		});
		//}
		return ChangePassButton;
	}

	private JLabel getChangePassLbl() {
		//if(ChangePassLbl == null) {
		ChangePassLbl = new JLabel();
		ChangePassLbl.setText("Change User Password");
		ChangePassLbl.setBounds(76, 51, 134, 16);
		//}
		return ChangePassLbl;
	}

	private JLabel getAddUsrLblSet() {
		//if(AddUsrLblSet == null) {
		AddUsrLblSet = new JLabel();
		AddUsrLblSet.setText("Add User To System");
		AddUsrLblSet.setBounds(331, 51, 115, 13);
		//}
		return AddUsrLblSet;
	}

	private JLabel getUsrNameLbl() {
		//if(UsrNameLbl == null) {
		UsrNameLbl = new JLabel();
		UsrNameLbl.setText("User Name:");
		UsrNameLbl.setBounds(290, 77, 66, 16);
		//}
		return UsrNameLbl;
	}

	private JLabel getNewPassLbl() {
		//if(NewPassLbl == null) {
		NewPassLbl = new JLabel();
		NewPassLbl.setText("Password:");
		NewPassLbl.setBounds(290, 109, 61, 16);
		//}
		return NewPassLbl;
	}

	private JTextField getNewUsrNameSet() {
		//if(NewUsrNameSet == null) {
		NewUsrNameSet = new JTextField();
		NewUsrNameSet.setBounds(368, 75, 125, 20);
		//}
		return NewUsrNameSet;
	}

	private JTextField getNewUsrPassSet() {
		//if(NewUsrPassSet == null) {
		NewUsrPassSet = new JTextField();
		NewUsrPassSet.setBounds(369, 109, 124, 20);
		//}
		return NewUsrPassSet;
	}

	private JButton getAddUsrButton() {
		//if(AddUsrButton == null) {
		AddUsrButton = new JButton();
		AddUsrButton.setText("Go!");
		AddUsrButton.setBounds(434, 202, 57, 20);
		AddUsrButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				//use AddData.adduser to add user using text fields

				String msg = addData.AddUser(NewUsrNameSet.getText(), NewUsrPassSet.getText(), 
						newEmailTxtField.getText(), NewTrueNameTxt.getText());

				if(msg.contains("User has been added into the database"))
				{
					JOptionPane.showMessageDialog(null, "User has been added into the database successfully.");
				}
				else if (msg.contains("User Data is empty"))
				{
					JOptionPane.showMessageDialog (null, "The Data Inserted was Empty\n No User was added to the Database", "User data inserted is empty", JOptionPane.ERROR_MESSAGE);
				}
				else if (msg.contains("User Data is Invalid"))
				{
					JOptionPane.showMessageDialog (null, "User Data is Invalid\n No User was added to the Database", "Invalid SUer Data Inputted into system", JOptionPane.ERROR_MESSAGE);
				}
				else
				{
					JOptionPane.showMessageDialog (null, "An Unknown Error has occured adding a user into the database.", "Unknown Error.", JOptionPane.ERROR_MESSAGE);
				}

			}
		});
		//}
		return AddUsrButton;
	}
	private JSeparator getJSeparatorUsrSettings1() {
		//if(jSeparatorUsrSettings1 == null) {
		//TODO JSeperator Verticle
		//http://docs.oracle.com/javase/tutorial/uiswing/components/separator.html
		jSeparatorUsrSettings1 = new JSeparator(JSeparator.VERTICAL);
		jSeparatorUsrSettings1.setBounds(7, 12, 9, 164);

		//}
		return jSeparatorUsrSettings1;
	}

	private JSeparator getJSeparatorUsrSettings2() {
		//if(jSeparatorUsrSettings2 == null) {
		jSeparatorUsrSettings2 = new JSeparator(JSeparator.VERTICAL);
		jSeparatorUsrSettings2.setBounds(528, 12, 9, 221);
		//}
		return jSeparatorUsrSettings2;
	}

	private JSeparator getJSeparatorUsrSettings3() {
		//if(jSeparatorUsrSettings3 == null) {
		jSeparatorUsrSettings3 = new JSeparator();
		jSeparatorUsrSettings3.setBounds(7, 176, 265, 10);
		//}
		return jSeparatorUsrSettings3;
	}

	private JSeparator getJSeparatorUsrSettings4() {
		//if(jSeparatorUsrSettings4 == null) {
		jSeparatorUsrSettings4 = new JSeparator();
		jSeparatorUsrSettings4.setBounds(8, 34, 520, 10);
		//}
		return jSeparatorUsrSettings4;
	}

	private JSeparator getJSeparatorUsrSettings5() {
		//if(jSeparatorUsrSettings5 == null) {
		jSeparatorUsrSettings5 = new JSeparator(JSeparator.VERTICAL);
		jSeparatorUsrSettings5.setBounds(272, 35, 13, 197);
		//}
		return jSeparatorUsrSettings5;
	}

	private JMenuItem getDispListSurveyMnuItm() {
		//if(DispListSurveyMnuItm == null) {
		//will display a list of surveys so the user can select one to view
		DispListSurveyMnuItm = new JMenuItem();
		DispListSurveyMnuItm.setText("Display A List of Survey Data");
		DispListSurveyMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				//check if logged in the execute action or display error message
				if (isLoggedin == true)
				{

					QueryCode = 
							"SELECT *FROM tblSurvey;";

					MainTextArea.setText(DBLink.DisplaySurvey(QueryCode));
					QueryCode = "";

				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});	

		//}
		return DispListSurveyMnuItm;
	}

	private JButton getCloseSettingsButton() {
		//if(CloseSettingsButton == null) {
		CloseSettingsButton = new JButton();
		CloseSettingsButton.setText("Close");
		CloseSettingsButton.setBounds(461, 264, 66, 26);
		//Dispose of the settings window
		CloseSettingsButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				SettingsFrame.dispose();

			}
		});

		//}
		return CloseSettingsButton;
	}
	//TODO Reference JFileChooser
	//http://docs.oracle.com/javase/6/docs/api/javax/swing/JFileChooser.html
	//http://www.exampledepot.com/egs/javax.swing.filechooser/createdlg.html
	//This will chose the path of the Survey data to add to the system
	private JFileChooser getAddSurveyJFileChooser() 
	{

		AddSurveyJFileChooser = new JFileChooser();
		AddSurveyJFileChooser.showOpenDialog(this);
		SurveyPath = AddSurveyJFileChooser.getSelectedFile();

		return AddSurveyJFileChooser;
	}


	private JFileChooser getExportDatajFileChooser() {


		ExportDatajFileChooser = new JFileChooser();
		ExportDatajFileChooser.showSaveDialog(this);
		SaveData = ExportDatajFileChooser.getSelectedFile();


		return ExportDatajFileChooser;
	}





	private JPanel getMainWindowPanel() {
		//if(MainWindowPanel == null) {
		MainWindowPanel = new JPanel();
		MainWindowPanel.setLayout(null);
		MainWindowPanel.setForeground(new java.awt.Color(128,0,255));
		//MainTExtArea added to MainScrollPane
		//MainWindowPanel.add(getMainTextArea());
		MainWindowPanel.add(getMainScrollPane());
		//	}
		return MainWindowPanel;
	}

	private JTextArea getMainTextArea() {
		//if(MainTextArea == null) {
		MainTextArea = new JTextArea();
		MainTextArea.setBounds(0, 0, 928, 666);
		MainTextArea.setTabSize(10);
		//change font so that spacing is fixed
		MainTextArea.setFont(new java.awt.Font("Courier New",0,12));
		MainTextArea.setText("");

		//MainTextArea.setPreferredSize(new java.awt.Dimension(MainWindowPanel.getWidth(), MainWindowPanel.getHeight()));
		//}
		return MainTextArea;
	}

	private JScrollPane getMainScrollPane() {
		//if(MainScrollPane == null) {
		MainScrollPane = new JScrollPane(getMainTextArea());
		MainScrollPane.setBounds(0, 0, 928, 666);
		//}
		return MainScrollPane;
	}

	private JMenuItem getExportUsrsMnuItm() {
		//if(ExportUsrsMnuItm == null) {
		ExportUsrsMnuItm = new JMenuItem();
		ExportUsrsMnuItm.setText("Export User List To File");
		ExportUsrsMnuItm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (isLoggedin == true)
				{
					getExportUserListjFileChooser();
					QueryCode = "SELECT UserID, TrueName, Username FROM tblUser";
					String usrList = "User List\n\n"+(DBLink.Display(QueryCode));
					QueryCode = "";
					//save to file
					String fileSaveMsg = savefile.ExportData(SaveUsrList, usrList);

					if	(savefile.getErrorMessages() == null)
					{
						JOptionPane.showMessageDialog(null, fileSaveMsg);
					}
					else
					{
						JOptionPane.showMessageDialog(null, savefile.getErrorMessages(),"Error Saving File",JOptionPane.ERROR_MESSAGE);
					}

				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});

		//}
		return ExportUsrsMnuItm;
	}

	private JFileChooser getExportUserListjFileChooser() {
		//if(ExportUserListjFileChooser == null) {
		ExportUserListjFileChooser = new JFileChooser();
		ExportUserListjFileChooser.showSaveDialog(this);

		SaveUsrList=ExportUserListjFileChooser.getSelectedFile();


		//}
		return ExportUserListjFileChooser;
	}

	private JMenuItem getDispListUsrs() {
		//if(DispListUsrs == null) {
		DispListUsrs = new JMenuItem();
		DispListUsrs.setText("Display List of Users");
		DispListUsrs.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (isLoggedin == true)
				{
					QueryCode = "SELECT UserID, TrueName, Username FROM tblUser";
					MainTextArea.setText(DBLink.Display(QueryCode));
					QueryCode = "";
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Please Login to Access System","Not Logged In.",JOptionPane.ERROR_MESSAGE);

				}


			}
		});

		//}
		return DispListUsrs;
	}

	private JLabel getNewEmailLbl() {
		//if(newEmailLbl == null) {
		newEmailLbl = new JLabel();
		newEmailLbl.setText("Email:");
		newEmailLbl.setBounds(290, 139, 34, 20);
		//}
		return newEmailLbl;
	}

	private JLabel getNewTruNameLbl() {
		//if(NewTruNameLbl == null) {
		NewTruNameLbl = new JLabel();
		NewTruNameLbl.setText("True Name:");
		NewTruNameLbl.setBounds(290, 171, 67, 18);
		//}
		return NewTruNameLbl;
	}

	private JTextField getNewEmailTxtFiled() {
		//if(newEmailTxtField == null) {
		newEmailTxtField = new JTextField();
		newEmailTxtField.setBounds(369, 139, 124, 20);
		//}
		return newEmailTxtField;
	}

	private JTextField getNewTrueNameTxt() {
		//if(NewTrueNameTxt == null) {
		NewTrueNameTxt = new JTextField();
		NewTrueNameTxt.setBounds(369, 170, 124, 20);
		//}
		return NewTrueNameTxt;
	}

	private JSeparator getJSeparatorUsrSettings6() {
		//if(jSeparatorUsrSettings6 == null) {
		jSeparatorUsrSettings6 = new JSeparator();
		jSeparatorUsrSettings6.setBounds(272, 231, 258, 10);
		//}
		return jSeparatorUsrSettings6;
	}

	private JButton getEnterSiteDataButton() {
		//if(EnterSiteDataButton == null) {
		EnterSiteDataButton = new JButton();
		EnterSiteDataButton.setText("Enter New Site");
		EnterSiteDataButton.setBounds(436, 93, 118, 21);
		EnterSiteDataButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String msg = "";
				//add site seperately
				msg += ""+addData.AddSite(USerDBID, SiteNameIn.getText(), 
						SiteLocationInTxt.getText());
				//send msg to main text area
				MainTextArea.setText("Results of adding Site Data:\n\n"+msg);
				//close the add data window
				AddDataFrame.dispose();
			}
		});
		//}
		return EnterSiteDataButton;
	}

	private JButton getEcologyDataButton() {
		//if(EcologyDataButton == null) {
		EcologyDataButton = new JButton();
		EcologyDataButton.setText("Enter Ecology Data");
		EcologyDataButton.setBounds(413, 302, 154, 24);
		EcologyDataButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String msg = "";
				//Check if the checkbox for a survey is checked
				if (FieldSurveyTick.isSelected() == true)
				{
					SurveyIsChecked = true;
				}
				else
				{
					SurveyIsChecked = false;
				}
				//if so then get survey ID 
				if (SurveyIsChecked == true)
				{
					//ask user for surveyID and display survey list in MainTextArea
					QueryCode = 
							"SELECT *FROM tblSurvey;";

					MainTextArea.setText(DBLink.DisplaySurvey(QueryCode));
					QueryCode = "";
					SurveyID = JOptionPane.showInputDialog("Enter The Survey ID of the Survey connected to Ecological Data.");
				}
				else
				{
					//if the check box is not checked then send the survey id as 0
					SurveyID = "";
				}
				//and send it in
				//add ecology data
				//display Site List
				//will add to maintextarea so user can chooser a site to use
				QueryCode = "SELECT SiteID, SiteName, SiteLocation FROM tblSite";
				String SiteList = DBLink.Display(QueryCode);
				QueryCode = "";
				JOptionPane.showMessageDialog(null, "\n\nSite List to Use:\n"+SiteList);

				msg += ""+addData.AddEcology(USerDBID, SurveyID, SurveyIsChecked, 
						EcologicalPhosphate.getText(), EcologicalSulphates.getText(), 
						EcologicalNitrates.getText(), EcologicalAmountPlants.getText(), 
						EcologicalAnimalAmounts.getText());

				//send msg to main text area
				MainTextArea.setText("Results of adding Ecology Data:\n\n"+msg);
				//close the add data window
				AddDataFrame.dispose();

			}
		});
		//}
		return EcologyDataButton;
	}

	private JButton getClimaticDataButton() {
		//if(ClimaticDataButton == null) {
		ClimaticDataButton = new JButton();
		ClimaticDataButton.setText("Enter Climatic Data");
		ClimaticDataButton.setBounds(424, 422, 142, 25);
		ClimaticDataButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String msg = "";
				//add Climatic data
				//display Site List
				//will add to maintextarea so user can chooser a site to use
				QueryCode = "SELECT SiteID, SiteName, SiteLocation FROM tblSite";
				String SiteList = DBLink.Display(QueryCode);
				QueryCode = "";
				JOptionPane.showMessageDialog(null, "\n\nSite List to Use:\n"+SiteList);

				msg += ""+addData.AddClimate(RainFallAmount.getText(), 
						WindSpd.getText(), AirPressure.getText(), 
						CloudCover.getText());
				//send msg to main text area
				MainTextArea.setText("Results of adding Ecology Data:\n\n"+msg);
				//close the add data window
				AddDataFrame.dispose();

			}
		});
		//}
		return ClimaticDataButton;
	}

}
